<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.punya</groupId>
  <artifactId>spring-boot-mvc-jsp-app</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.2.RELEASE</version>
		<!-- <version>2.0.0.RELEASE</version> -->
		<!-- <version>1.5.4.RELEASE</version> -->
		<!-- <version>1.4.1.RELEASE</version> -->
		<!-- <version>1.3.1.RELEASE</version> -->
		<!-- <version>1.2.1.RELEASE</version> -->
		<!-- <version>1.1.1.RELEASE</version> -->
		<!-- <version>1.0.1.RELEASE</version> -->
		<relativePath />
	</parent>

	<properties>
		
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<java.version>1.8</java.version>
		
		<!-- Required For .war packaging -->
			<!-- Required For .war packaging and that to deploying to external tomcat server -->
		<start-class>com.springboot.SpringBootSpringMvcNoDBJspWarApp</start-class>
		
		<failOnMissingWebXml>false</failOnMissingWebXml>
		
		<jquery.version>3.0.0</jquery.version>
		<bootstrap.version>4.2.1</bootstrap.version>
		<angularjs.version>1.4.9</angularjs.version>
		
		<sonar-maven-plugin.version>2.4</sonar-maven-plugin.version>
		
	</properties>

	<dependencies>
	
		<!--
		################################################################################
		FrontEnd maven dependencies
		################################################################################
		 -->
	
		<!-- Required when we are working with JSP -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<!-- <scope>provided</scope> -->
		</dependency>
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>1.9.1</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>3.3.6</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap-datepicker</artifactId>
			<version>1.0.1</version>
		</dependency>
		<!-- <dependency>
			<groupId>org.webjars</groupId>
			<artifactId>angularjs</artifactId>
			<version>${angularjs.version}</version>
		</dependency> -->
		
		<!-- 
		################################################################################
		BackEnd dependencies
		################################################################################
		 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			 <exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions> 
		</dependency>
		 <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency> 
		<!-- for useing jetty server as embedded server -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jetty</artifactId>
		</dependency> -->
		<!-- for useing tomcat server as embedded server -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
		</dependency> -->
		<!-- <dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-validation</artifactId>
		</dependency> -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency> -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency> -->
		 <dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		    <!-- <optional>true</optional> -->
		</dependency>	
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
		<!-- <dependency>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>sonar-maven-plugin</artifactId>
			<version>2.4</version>s
		</dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<finalName>spring-boot-mvc-jsp-app2</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- required for .war packaging -->
				<!-- <configuration>
                    <mainClass>com.springboot.SpringBootSpringMvcWarApp</mainClass>
                     <jvmArguments>-Dspring.profiles.active=dev</jvmArguments>
                     <profiles>
                        <profile>dev</profile>
                    </profiles>
                </configuration> -->
			</plugin>
			<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<configuration>
				<source>${java.version}</source>
				<target>${java.version}</target>
			</configuration>
		</plugin>
		<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                   <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
        </plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-plugin</artifactId>
		</plugin>
		<plugin>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>sonar-maven-plugin</artifactId>
			<version>${sonar-maven-plugin.version}</version>
		</plugin>
		<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.2</version>
				<!-- <configuration>
				        <skip>${maven.test.skip}</skip>
				        <destFile>${basedir}/target/coverage-reports/jacoco-unit.exec</destFile>
				        <dataFile>${basedir}/target/coverage-reports/jacoco-unit.exec</dataFile>
				        <output>file</output>
				        <append>true</append>
				        <excludes>
				            <exclude>*MethodAccess</exclude>
				        </excludes>
			    </configuration> -->
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<!-- attached to Maven test phase -->
					<execution>
						<id>report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>jacoco-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>PACKAGE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.0</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- This is working -->
			<!-- To deploy in external tomcat server : mvn tomcat7:deploy , mvn tomcat7:redeploy -->
			<plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.1</version>
                <configuration>
                    <url>http://localhost:8080/manager/text</url>
                    <server>mytomcat9server</server>
                    <path>/spring-boot-mvc-jsp-app</path>
                </configuration>
            </plugin>
            <!--OR-->
            <!-- To deploy in external tomcat server : mvn cargo:deploy , mvn cargo:redeploy -->
	        <!--
			<plugin>
	        <groupId>org.codehaus.cargo</groupId>
	        <artifactId>cargo-maven2-plugin</artifactId>
	        <version>1.3.3</version>
	        <configuration>
	            <container>
	                <containerId>mytomcat9server</containerId>
	                <type>remote</type>
	            </container>
	            <configuration>
	                <type>runtime</type>
	                <properties>
	                    <cargo.remote.username>admin</cargo.remote.username>
	                    <cargo.remote.password>admin</cargo.remote.password>
	                    <cargo.hostname>localhost</cargo.hostname>
	                    <cargo.protocol>http</cargo.protocol>
	                    <cargo.servlet.port>8080</cargo.servlet.port>
	                </properties>
	            </configuration>
	            <deployer>
	                <type>remote</type>
	            </deployer>
	            <deployables>
	                <deployable>
	                    <groupId>...</groupId>
	                    <artifactId>...</artifactId>
	                    <type>war</type>
	                </deployable>
	            </deployables>
	
	        </configuration>
	    </plugin>-->
		<!-- Docker plug in to prepare docker image while building the war file -->
		<!-- <plugin>
			<groupId>com.spotify</groupId>
			<artifactId>dockerfile-maven-plugin</artifactId>
			<version>1.4.10</version>
			<executions>
				<execution>
					<id>default</id>
					<goals>
						<goal>build</goal>
					</goals>
				</execution>
			</executions>
			<configuration>
				<repository>punya/${project.name}</repository>
				<tag>${project.version}</tag>
				<skipDockerInfo>true</skipDockerInfo>
			</configuration>
		</plugin>-->
		</plugins>
	</build>
	<!-- <profiles>
		<profile>
				<id>tomcat</id>
				<dependencies>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-tomcat</artifactId>
						<scope>provided</scope>
					</dependency>
				</dependencies>
			</profile>
			<profile>
				<id>jetty</id>
				<dependencies>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-jetty</artifactId>
						<scope>provided</scope>
					</dependency>
				</dependencies>
			</profile>
			<profile>
				<id>undertow</id>
				<dependencies>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-undertow</artifactId>
						<scope>provided</scope>
					</dependency>
				</dependencies>
			</profile>
	</profiles> -->
	
	<!-- <repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestones</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestones</url>
		</pluginRepository>
	</pluginRepositories> -->
</project>
